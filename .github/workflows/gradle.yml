name: Deploy Spring Boot Application

on:
  push:
    branches: [ "main", "main_test", "main_test_2" ]

permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Build with Gradle
        uses: gradle/gradle-build-action@67421db6bd0bf253fb4bd25b31ebb98943c375e1
        with:
          arguments: build

      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: gaezzange-jar
          path: build/libs/*.jar

  deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Download artifact
        uses: actions/download-artifact@v3
        with:
          name: gaezzange-jar

      - name: Setup SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa

      - name: Add known hosts
        run: |
          ssh-keyscan -H ${{ secrets.SERVER_IP }} >> ~/.ssh/known_hosts

      - name: Create remote directory and copy JAR files
        run: |
          ssh ${{ secrets.SSH_USER }}@${{ secrets.SERVER_IP }} "mkdir -p ~/app"
          scp *.jar ${{ secrets.SSH_USER }}@${{ secrets.SERVER_IP }}:~/app

      - name: Check out repository
        uses: actions/checkout@v3

      - name: Create .env file
        run: |
          echo "MYSQL_URL=${{ secrets.MYSQL_URL }}" >> .env
          echo "MYSQL_USER=${{ secrets.MYSQL_USER }}" >> .env
          echo "MYSQL_PASSWORD=${{ secrets.MYSQL_PASSWORD }}" >> .env
          echo "MYSQL_ROOT_PASSWORD=${{ secrets.MYSQL_ROOT_PASSWORD }}" >> .env
          echo "HOST_PRIVATE_IP=${{ secrets.HOST_PRIVATE_IP }}" >> .env
          echo "SERVER_NAME=${{ secrets.SERVER_NAME }}" >> .env

      - name: Copy Docker Compose and configurations
        run: |
          ls
          scp -o StrictHostKeyChecking=no ./docker-compose.yml ${{ secrets.SSH_USER }}@${{ secrets.SERVER_IP }}:~/
          scp -o StrictHostKeyChecking=no -r ./nginx ${{ secrets.SSH_USER }}@${{ secrets.SERVER_IP }}:~/
          scp -o StrictHostKeyChecking=no -r ./initdb ${{ secrets.SSH_USER }}@${{ secrets.SERVER_IP }}:~/initdb
          scp -o StrictHostKeyChecking=no ./.env ${{ secrets.SSH_USER }}@${{ secrets.SERVER_IP }}:~/.env

      - name: Deploy Nginx/MySQL/Redis with Docker Compose
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_USER }}@${{ secrets.SERVER_IP }} "
          sudo curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose
          docker-compose --version
          cd ~/ && sudo docker-compose down && sudo docker-compose up -d
          "

      - name: Restart application
        run: |
          ssh ${{ secrets.SSH_USER }}@${{ secrets.SERVER_IP }} "
            if ! type java > /dev/null 2>&1; then
              sudo apt-get install -y openjdk-17-jre-headless
            fi
            sudo fuser -k 8080/tcp || true
            sudo nohup java -jar ~/app/gaezzange-application.jar  \
            --spring.profiles.active=${{ secrets.SPRING_PROFILE_ACTIVE }} \
            --spring.datasource.url=${{ secrets.MYSQL_URL }} \
            --spring.datasource.username=${{ secrets.MYSQL_USER }} \
            --spring.datasource.password=${{ secrets.MYSQL_PASSWORD }} \
            --spring.security.oauth2.client.registration.google.client-id=${{ secrets.GOOGLE_CLIENT_ID }} \
            --spring.security.oauth2.client.registration.google.client-secret=${{ secrets.GOOGLE_CLIENT_SECRET }} \
            --spring.security.oauth2.client.registration.kakao.client-id=${{ secrets.KAKAO_CLIENT_ID }} \
            --spring.security.oauth2.client.registration.kakao.client-secret=${{ secrets.KAKAO_CLIENT_SECRET }} \
            --spring.security.oauth2.client.registration.kakaol.client-id=${{ secrets.KAKAO_CLIENT_ID }} \
            --spring.security.oauth2.client.registration.kakaol.client-secret=${{ secrets.KAKAO_CLIENT_SECRET }} \
            --jwt.secretKey=${{ secrets.JWT_SECRET }} > ~/app/deploy.log 2>&1 &
          "

